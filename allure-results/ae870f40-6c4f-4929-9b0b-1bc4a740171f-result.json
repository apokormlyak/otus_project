{"name": "Тест: brewery page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"link text\",\"selector\":\"Previous\"}\n  (Session info: chrome=115.0.5790.110)\nStacktrace:\n#0 0x5642aa0054e3 <unknown>\n#1 0x5642a9d34c76 <unknown>\n#2 0x5642a9d70c96 <unknown>\n#3 0x5642a9d70dc1 <unknown>\n#4 0x5642a9daa7f4 <unknown>\n#5 0x5642a9d9003d <unknown>\n#6 0x5642a9da830e <unknown>\n#7 0x5642a9d8fde3 <unknown>\n#8 0x5642a9d652dd <unknown>\n#9 0x5642a9d6634e <unknown>\n#10 0x5642a9fc53e4 <unknown>\n#11 0x5642a9fc93d7 <unknown>\n#12 0x5642a9fd3b20 <unknown>\n#13 0x5642a9fca023 <unknown>\n#14 0x5642a9f981aa <unknown>\n#15 0x5642a9fee6b8 <unknown>\n#16 0x5642a9fee847 <unknown>\n#17 0x5642a9ffe243 <unknown>\n#18 0x7f8373420609 start_thread", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b74ee6ca263d030f3ba0bdcca62eca9f\")>, url = 'https://www.openbrewerydb.org/'\n\n    @allure.title(\"Тест: brewery page\")\n    @allure.tag('UI')\n    def test_brewery_page(browser, url):\n        browser.get(url=url+BreweriesPage(browser).URL)\n        random_brewery = BreweriesPage(browser).get_random_brewery().text\n        browser.get(url=url+BreweriesPage(browser).URL+'/' + random_brewery)\n        browser.forward()\n        WebDriverWait(browser, 5)\n        brewery_title = BreweriesPage(browser).get_title_of_brewery_page().text\n        brewery_title = brewery_title.replace('Breweries in ', '')\n        assert random_brewery == brewery_title\n    \n        breweries_on_page = BreweriesPage(browser).get_breweries_on_page().text\n        pages_count = breweries_on_page.split()[-1][0]\n        BreweriesPage(browser).get_brewery_table()\n        if int(pages_count) == 1:\n            try:\n                BreweriesPage(browser).get_next_page_button()\n            except NoSuchElementException as e:\n                logger.info(e)\n        else:\n            BreweriesPage(browser).get_next_page_button()\n            browser.back()\n>           WebDriverWait(browser, 10).until(EC.element_to_be_clickable(BreweriesPage(browser)\n                                                                        .get_previous_page_button()))\n\ntests/tests_ui/test_ui.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/brewerie_page.py:34: in get_previous_page_button\n    self.driver.find_element(*self.PREVIOUS_PAGE_BUTTON).click()\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fea1e5dd190>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...wn>\\\\n#16 0x5642a9fee847 \\\\u003Cunknown>\\\\n#17 0x5642a9ffe243 \\\\u003Cunknown>\\\\n#18 0x7f8373420609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"link text\",\"selector\":\"Previous\"}\nE         (Session info: chrome=115.0.5790.110)\nE       Stacktrace:\nE       #0 0x5642aa0054e3 <unknown>\nE       #1 0x5642a9d34c76 <unknown>\nE       #2 0x5642a9d70c96 <unknown>\nE       #3 0x5642a9d70dc1 <unknown>\nE       #4 0x5642a9daa7f4 <unknown>\nE       #5 0x5642a9d9003d <unknown>\nE       #6 0x5642a9da830e <unknown>\nE       #7 0x5642a9d8fde3 <unknown>\nE       #8 0x5642a9d652dd <unknown>\nE       #9 0x5642a9d6634e <unknown>\nE       #10 0x5642a9fc53e4 <unknown>\nE       #11 0x5642a9fc93d7 <unknown>\nE       #12 0x5642a9fd3b20 <unknown>\nE       #13 0x5642a9fca023 <unknown>\nE       #14 0x5642a9f981aa <unknown>\nE       #15 0x5642a9fee6b8 <unknown>\nE       #16 0x5642a9fee847 <unknown>\nE       #17 0x5642a9ffe243 <unknown>\nE       #18 0x7f8373420609 start_thread\n\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:245: NoSuchElementException"}, "start": 1691148489498, "stop": 1691148492895, "uuid": "d25edeca-171b-455f-90fe-6b0f27531169", "historyId": "33b8f25c073901fad64046b30f4cd51c", "testCaseId": "33b8f25c073901fad64046b30f4cd51c", "fullName": "tests.tests_ui.test_ui#test_brewery_page", "labels": [{"name": "tag", "value": "UI"}, {"name": "parentSuite", "value": "tests.tests_ui"}, {"name": "suite", "value": "test_ui"}, {"name": "host", "value": "QA07"}, {"name": "thread", "value": "265270-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.tests_ui.test_ui"}]}